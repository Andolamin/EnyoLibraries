enyo.kind({	name: "TabbedHeaderPanel",	kind: "FittableRows",	style: "height: 100%; overflow: hidden; width: 100%",	published: {		tabs: "",		tabStates: "",		useStates: false,		activeTab: "Home",		caption: "",		captionMixin: "",		tabWidth: "auto",		tabLocation: "left",		bookComponents: "",		narrowFit: false,		narrowWidth: 'auto',        sideMenu: false,        scrollThrough: false	},	lastActiveTab: "Home",	components: [		{			name: "tabHeader",			kind: "TabbedHeader",			style: "width: 100%",			tabs: this.tabs,			activeTab: this.activeTab,			caption: this.caption,			tabWidth: this.tabWidth,			tabLocation: this.tabLocation,			narrowFit: this.narrowFit,			narrowWidth: this.narrowWidth,			onChange: "handleTabChanged"		},		{			kind: "SmoothPanels",			name: "ViewBook", 			fit: true,			classes: "panels-sample-panels enyo-border-box",			async: false,			components: [			],			onInAnimationStart: "handleInAnimationStart",			onOutAnimationEnd: "handleOutAnimationEnd"		}	],	constructor: function() {		this.tabs = ['Home', 'Tab'];		this.bookComponents = [];		this.caption = {content: "Tabbed Header"};		this.captionMixin = {};		this.inherited(arguments);	},	create: function() {		this.inherited(arguments);		this.tabsChanged();		this.captionChanged();		this.captionMixinChanged();		this.tabWidthChanged();		this.tabLocationChanged();		this.bookComponentsChanged();		this.narrowFitChanged();		this.narrowWidthChanged();		this.activeTabChanged(this.activeTab);        this.scrollThroughChanged();	},	tabsChanged: function() {		this.$.tabHeader.setTabs(this.tabs);	},	activeTabChanged: function(inOldValue) {		this.$.tabHeader.setActiveTab(this.activeTab);		this.lastActiveTab = inOldValue;		this.updateBook();	},	captionChanged: function() {		this.$.tabHeader.setCaption(this.caption);	},	captionMixinChanged: function() {		this.$.tabHeader.setCaptionMixin(this.captionMixin);	},	tabWidthChanged: function() {		this.$.tabHeader.setTabWidth(this.tabWidth);	},	tabLocationChanged: function() {		this.$.tabHeader.setTabLocation(this.tabLocation);	},	handleTabChanged: function(inSender, inEvent) {		if (this.useStates) {			enyo.Signals.send('onNewState', {newState: this.tabStates[inEvent.content]});		} else {			this.setActiveTab(inEvent.content);		}	},	narrowFitChanged: function() {		this.$.tabHeader.setNarrowFit(this.narrowFit);	},	narrowWidthChanged: function() {		this.$.tabHeader.setNarrowWidth(this.narrowWidth);	},	updateBook: function() {		var selectedComponent = '';		var len = this.bookComponents.length;		for (var componentIndex = 0; componentIndex < len; componentIndex++) {			if (this.bookComponents[componentIndex].name == (this.activeTab + "View")) {				selectedComponent = this.bookComponents[componentIndex].name;				break;			}		}		if (selectedComponent == '') {			this.warn("No view found for selected tab. Check to be sure views are specified for every tab.");		} else {			var transitionDirection = '';			var lastTabIndex = this.tabs.indexOf(this.lastActiveTab);			var currentTabIndex = this.tabs.indexOf(this.activeTab);			if (lastTabIndex < 0 || currentTabIndex < 0) {				transitionDirection = 'neither';			} else if (lastTabIndex < currentTabIndex) {				transitionDirection = 'left';			} else if (lastTabIndex > currentTabIndex) {				transitionDirection = 'right';			} else {				transitionDirection = 'neither';			}			switch(transitionDirection) {				case 'left':					this.$.ViewBook.select(this.$[selectedComponent], SmoothPanels.SLIDE_IN_FROM_RIGHT, SmoothPanels.SLIDE_OUT_TO_LEFT);					break;				case 'right':					this.$.ViewBook.select(this.$[selectedComponent], SmoothPanels.SLIDE_IN_FROM_LEFT, SmoothPanels.SLIDE_OUT_TO_RIGHT);					break;				default:					this.$.ViewBook.select(this.$[selectedComponent]);					break;			}		}			},	bookComponentsChanged: function() {		this.$.ViewBook.destroyClientControls();		this.$.ViewBook.createComponents(this.bookComponents, {owner: this});		this.$.ViewBook.resetArranger();	},	handleInAnimationStart: function(sender, event) {		if (event.newPanel.showHeavyComponents) {			event.newPanel.showHeavyComponents();		}	},	handleOutAnimationEnd: function(sender, event) {		if (event.oldPanel.hideHeavyComponents) {			event.oldPanel.hideHeavyComponents();		}	},    scrollThroughChanged: function() {        if (this.scrollThrough == true) {            this.addClass('scroll-through');        } else {            this.removeClass('scroll-through');        }    }});